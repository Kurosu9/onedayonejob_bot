import telebot
from telebot import types
from config import TOKEN, ADMIN_ID
from database import (
    create_tables,
    add_user,
    update_user_phone,
    add_vacancy,
    get_all_vacancies,
    get_vacancy_by_id,
    get_vacancies_by_category,
    get_user
)
import re
import signal
import sys

def signal_handler(sig, frame):
    print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

bot = telebot.TeleBot(TOKEN)

user_states = {}

create_tables()

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if user:
        bot.send_message(message.chat.id, f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user["name"]}!')
        show_main_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        bot.register_next_step_handler(message, get_name)

def get_name(message):
    name = message.text
    user_id = message.from_user.id
    add_user(user_id, name)
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +996123456789):')
    bot.register_next_step_handler(message, get_phone)

def get_phone(message):
    phone = message.text
    user_id = message.from_user.id
    update_user_phone(user_id, phone)
    bot.send_message(message.chat.id, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç.')
    show_main_menu(message.chat.id)

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üìã –í–∞–∫–∞–Ω—Å–∏–∏'))

    if chat_id == ADMIN_ID:
        markup.add(types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é'))

    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_menu(message):
    user_id = message.from_user.id

    if user_id in user_states:
        if user_states[user_id] == 'waiting_for_vacancy_title':
            admin_add_title(message)
        elif user_states[user_id] == 'waiting_for_vacancy_description':
            admin_add_description(message)
        return

    if message.text == 'üìã –í–∞–∫–∞–Ω—Å–∏–∏':
        list_categories(message)
    elif message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é' and message.chat.id == ADMIN_ID:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"):', reply_markup=cancel_markup())
        user_states[user_id] = 'waiting_for_vacancy_title'
    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        del user_states[user_id]
        show_main_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.')

def cancel_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))
    return markup

def list_categories(message):
    categories = ['–ö—É—Ä—å–µ—Ä', '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–í–æ–¥–∏—Ç–µ–ª—å', '–û—Ñ–∏—Ü–∏–∞–Ω—Ç']
    markup = types.InlineKeyboardMarkup()

    for category in categories:
        button = types.InlineKeyboardButton(text=category, callback_data=f'category_{category}')
        markup.add(button)

    bot.send_message(message.chat.id, 'üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞–∫–∞–Ω—Å–∏–π:', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìã –í–∞–∫–∞–Ω—Å–∏–∏')
def handle_vacancies(message):
    list_categories(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def callback_category(call):
    category = call.data.split('_')[1]
    vacancies = get_vacancies_by_category(category)

    if vacancies:
        for vacancy_id, title, description, _ in vacancies:
            text = f"üìù <b>{title}</b>\n\n{description}"

            url_pattern = r'(https?://[^\s]+)'
            urls = re.findall(url_pattern, description)

            if urls:
                url = urls[0]
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=url))
                bot.send_message(
                    call.message.chat.id,
                    text,
                    parse_mode='HTML',
                    reply_markup=markup,
                    disable_web_page_preview=True
                )
            else:
                bot.send_message(
                    call.message.chat.id,
                    text,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
    else:
        bot.send_message(call.message.chat.id, f'–í–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}" –Ω–µ—Ç.')

def admin_add_title(message):
    user_id = message.from_user.id

    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        del user_states[user_id]
        show_main_menu(message.chat.id)
        return

    title = message.text
    user_states[user_id] = 'waiting_for_vacancy_description'
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"):', reply_markup=cancel_markup())
    bot.register_next_step_handler(message, admin_add_description, title)

def admin_add_description(message, title):
    user_id = message.from_user.id

    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        del user_states[user_id]
        show_main_menu(message.chat.id)
        return

    description = message.text
    user_states[user_id] = 'waiting_for_vacancy_category'

    categories = ['–ö—É—Ä—å–µ—Ä', '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–í–æ–¥–∏—Ç–µ–ª—å', '–û—Ñ–∏—Ü–∏–∞–Ω—Ç']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for category in categories:
        markup.add(types.KeyboardButton(category))
    markup.add(types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏:', reply_markup=markup)
    bot.register_next_step_handler(message, process_category_selection, title, description)

def process_category_selection(message, title, description):
    user_id = message.from_user.id

    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        del user_states[user_id]
        show_main_menu(message.chat.id)
        return

    category = message.text
    add_vacancy(title, description, category)
    bot.send_message(message.chat.id, '‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    del user_states[user_id]
    show_main_menu(message.chat.id)


if __name__ == '__main__':
    bot.polling(none_stop=True)